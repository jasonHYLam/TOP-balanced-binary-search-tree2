(()=>{"use strict";function t(l){if(1===l.length)return l;{const e=Math.ceil(l.length/2);let r=t(l.slice(0,e)),n=t(l.slice(e)),i=[];for(;r[0]||n[0];)r[0]<n[0]?(i.push(r[0]),r.shift()):n[0]<r[0]?(i.push(n[0]),n.shift()):r[0]==n[0]?(i.push(r[0]),i.push(n[0]),r.shift(),n.shift()):r[0]?n[0]||(i.push(r[0]),r.shift()):(i.push(n[0]),n.shift());return i}}class l{constructor(t){this.data=t,this.left=null,this.right=null}}function e(t){if(0===t.length)return null;{const r=Math.floor(t.length/2),n=new l(t[r]);return n.left=e(t.slice(0,r)),n.right=e(t.slice(r+1)),n}}const r=(t,l="",e=!0)=>{null!==t&&(null!==t.right&&r(t.right,`${l}${e?"│   ":"    "}`,!1),console.log(`${l}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&r(t.left,`${l}${e?"    ":"│   "}`,!0))},n=[1,7,4,23,8,9,4,3,5,7,9,67,6345,324];console.log(n);let i=new class{constructor(l){this.root=function(l){let r=t(l);return e([...new Set(r)])}(l)}insert(t){!function t(e,r){if(r<e.data&&null==e.left){const t=new l(r);e.left=t}else if(r>e.data&&null==e.right){const t=new l(r);e.right=t}else{if(r<e.data)return t(e.left,r);if(r>e.data)return t(e.right,r);if(r==e.data)return void console.log("value already in tree, try another value")}}(this.root,t)}delete(t){!function t(l,e){if(l.left&&l.left.data===e&&null===l.left.left&&null===l.left.right)l.left=null;else if(l.right&&l.right.data===e&&null===l.right.left&&null===l.right.right)l.right=null;else if(l.left&&l.left.data===e&&null!==l.left.left&&null===l.left.left.left&&null===l.left.left.right&&null===l.left.right)l.left=l.left.left;else if(l.left&&l.left.data===e&&null!==l.left.right&&null===l.left.right.left&&null===l.left.right.right&&null===l.left.left)l.left=l.left.right;else if(l.right&&l.right.data===e&&null!==l.right.left&&null===l.right.left.left&&null===l.right.left.right&&null===l.right.right)l.right=l.right.left;else if(l.right&&l.right.data===e&&null!==l.right.right&&null===l.right.right.left&&null===l.right.right.right&&null===l.right.left)l.right=l.right.right;else if(l.data===e&&null!==l.left&&null!==l.right){let t=l.right,e=t;for(;null!==t.left;)e=t,t=t.left;l.data=t.data,e.left=null}else{if(e>l.data&&null===l.right)return void console.log(`${e} not found, please try again`);if(e<l.data&&null===l.left)return void console.log(`${e} not found, please try again`);if(e<l.data)return t(l.left,e);if(e>l.data)return t(l.right,e)}}(this.root,t)}find(t){!function t(l,e){if(l.data===e)return console.log(l),l;if(e>l.data&&null===l.right)console.log(`${e} not found`);else if(e<l.data&&null===l.left)console.log(`${e} not found`);else{if(e>l.data)return t(l.right,e);if(e<l.data)return t(l.left,e)}}(this.root,t)}levelOrderIterative(t){let l=[];if(l.push(this.root),t)for(;0!==l.length;)t(l[0]),l[0].left&&l.push(l[0].left),l[0].right&&l.push(l[0].right),l.shift();else{let t=[];for(;0!==l.length;)t.push(l[0]),l[0].left&&l.push(l[0].left),l[0].right&&l.push(l[0].right),l.shift()}}preOrder(t){if(t){function l(e){t(e),null===e.left&&null===e.right||(e.left&&l(e.left),e.right&&l(e.right))}l(this.root)}else{function e(t){let l=[t.data];return null===t.left&&null===t.right?[t.data]:(t.left&&(l=l.concat(e(t.left))),t.right&&(l=l.concat(e(t.right))),l)}console.log(e(this.root))}}inOrder(t){if(t){function l(e){null===e.left&&null===e.right?t(e):(e.left&&l(e.left),t(e),e.right&&l(e.right))}l(this.root)}else{function e(t){let l=[];return t.left&&(l=l.concat(e(t.left))),l=l.concat([t.data]),t.right&&(l=l.concat(e(t.right))),l}console.log(e(this.root))}}postOrder(t){if(t){function l(e){null===e.left&&null===e.right||(e.left&&l(e.left),e.right&&l(e.right)),t(e)}l(this.root)}else{function e(t){let l=[];return t.left&&(l=l.concat(e(t.left))),t.right&&(l=l.concat(e(t.right))),l=l.concat([t.data]),l}console.log(e(this.root))}}height(t){return function t(l,e=0,r=[]){try{return null==l.left&&null==l.right?r.push(e):(l.left&&t(l.left,e+1,r),l.right&&t(l.right,e+1,r)),Math.max(...r)}catch(t){return"value not found"}}(function t(l,e){return l.data===e?l:e>l.data&&null===l.right||e<l.data&&null===l.left?void 0:e>l.data?t(l.right,e):e<l.data?t(l.left,e):void 0}(this.root,t))}depth(t){return function t(l,e,r=0){if(l.data===e)return r;if(null==l.left&&null==l.right)console.log("value not found");else{if(e<l.data)return t(l.left,e,r+1);if(e>l.data)return t(l.right,e,r+1)}}(this.root,t)}isBalanced(){return function t(l,e=[]){if(null===l.left&&null!==l.right){if(null===l.right.left&&null===l.right.right)return;e.push(!1)}else{if(null===l.left||null!==l.right)return l.left&&t(l.left,e),l.right&&t(l.right,e),!e.includes(!1);if(null===l.left.left&&null===l.left.right)return;e.push(!1)}}(this.root)}rebalance(){}}(n);console.log(i),r(i.root),i.find(6),i.find(1),i.find(5),i.levelOrderIterative(),i.preOrder(),i.postOrder(),r(i.root),console.log(i.depth(320)),console.log(i.isBalanced())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,