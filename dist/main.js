(()=>{"use strict";function t(l){if(1===l.length)return l;{const e=Math.ceil(l.length/2);let r=t(l.slice(0,e)),n=t(l.slice(e)),i=[];for(;r[0]||n[0];)r[0]<n[0]?(i.push(r[0]),r.shift()):n[0]<r[0]?(i.push(n[0]),n.shift()):r[0]==n[0]?(i.push(r[0]),i.push(n[0]),r.shift(),n.shift()):r[0]?n[0]||(i.push(r[0]),r.shift()):(i.push(n[0]),n.shift());return i}}class l{constructor(t){this.data=t,this.left=null,this.right=null}}function e(l){let e=t(l);return r([...new Set(e)])}function r(t){if(0===t.length)return null;{const e=Math.floor(t.length/2),n=new l(t[e]);return n.left=r(t.slice(0,e)),n.right=r(t.slice(e+1)),n}}const n=(t,l="",e=!0)=>{null!==t&&(null!==t.right&&n(t.right,`${l}${e?"│   ":"    "}`,!1),console.log(`${l}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&n(t.left,`${l}${e?"    ":"│   "}`,!0))},i=[1,7,4,23,8,9,4,3,5,7,9,67,6345,324];console.log(i);let f=new class{constructor(t){this.root=e(t)}insert(t){!function t(e,r){if(r<e.data&&null==e.left){const t=new l(r);e.left=t}else if(r>e.data&&null==e.right){const t=new l(r);e.right=t}else{if(r<e.data)return t(e.left,r);if(r>e.data)return t(e.right,r);if(r==e.data)return void console.log("value already in tree, try another value")}}(this.root,t)}delete(t){!function t(l,e){if(l.left&&l.left.data===e&&null===l.left.left&&null===l.left.right)l.left=null;else if(l.right&&l.right.data===e&&null===l.right.left&&null===l.right.right)l.right=null;else if(l.left&&l.left.data===e&&null!==l.left.left&&null===l.left.left.left&&null===l.left.left.right&&null===l.left.right)l.left=l.left.left;else if(l.left&&l.left.data===e&&null!==l.left.right&&null===l.left.right.left&&null===l.left.right.right&&null===l.left.left)l.left=l.left.right;else if(l.right&&l.right.data===e&&null!==l.right.left&&null===l.right.left.left&&null===l.right.left.right&&null===l.right.right)l.right=l.right.left;else if(l.right&&l.right.data===e&&null!==l.right.right&&null===l.right.right.left&&null===l.right.right.right&&null===l.right.left)l.right=l.right.right;else if(l.data===e&&null!==l.left&&null!==l.right){let t=l.right,e=t;for(;null!==t.left;)e=t,t=t.left;l.data=t.data,e.left=null}else{if(e>l.data&&null===l.right)return void console.log(`${e} not found, please try again`);if(e<l.data&&null===l.left)return void console.log(`${e} not found, please try again`);if(e<l.data)return t(l.left,e);if(e>l.data)return t(l.right,e)}}(this.root,t)}find(t){!function t(l,e){if(l.data===e)return console.log(l),l;if(e>l.data&&null===l.right)console.log(`${e} not found`);else if(e<l.data&&null===l.left)console.log(`${e} not found`);else{if(e>l.data)return t(l.right,e);if(e<l.data)return t(l.left,e)}}(this.root,t)}levelOrderIterative(t){let l=[];if(l.push(this.root),!t){let t=[];for(;0!==l.length;)t.push(l[0].data),l[0].left&&l.push(l[0].left),l[0].right&&l.push(l[0].right),l.shift();return t}for(;0!==l.length;)t(l[0]),l[0].left&&l.push(l[0].left),l[0].right&&l.push(l[0].right),l.shift()}preOrder(t){if(!t){function l(t){let e=[t.data];return null===t.left&&null===t.right?[t.data]:(t.left&&(e=e.concat(l(t.left))),t.right&&(e=e.concat(l(t.right))),e)}return console.log(l(this.root)),l(this.root)}{function e(l){t(l),null===l.left&&null===l.right||(l.left&&e(l.left),l.right&&e(l.right))}e(this.root)}}inOrder(t){if(!t){function l(t){let e=[];return t.left&&(e=e.concat(l(t.left))),e=e.concat([t.data]),t.right&&(e=e.concat(l(t.right))),e}return console.log(l(this.root)),l(this.root)}{function e(l){null===l.left&&null===l.right?t(l):(l.left&&e(l.left),t(l),l.right&&e(l.right))}e(this.root)}}postOrder(t){if(t){function l(e){null===e.left&&null===e.right||(e.left&&l(e.left),e.right&&l(e.right)),t(e)}l(this.root)}else{function e(t){let l=[];return t.left&&(l=l.concat(e(t.left))),t.right&&(l=l.concat(e(t.right))),l=l.concat([t.data]),l}console.log(e(this.root))}}height(t){return function t(l,e=0,r=[]){try{return null==l.left&&null==l.right?r.push(e):(l.left&&t(l.left,e+1,r),l.right&&t(l.right,e+1,r)),Math.max(...r)}catch(t){return"value not found"}}(function t(l,e){return l.data===e?l:e>l.data&&null===l.right||e<l.data&&null===l.left?void 0:e>l.data?t(l.right,e):e<l.data?t(l.left,e):void 0}(this.root,t))}depth(t){return function t(l,e,r=0){if(l.data===e)return r;if(null==l.left&&null==l.right)console.log("value not found");else{if(e<l.data)return t(l.left,e,r+1);if(e>l.data)return t(l.right,e,r+1)}}(this.root,t)}isBalanced(){return function t(l,e=[]){if(null===l.left&&null!==l.right){if(null===l.right.left&&null===l.right.right)return;e.push(!1)}else{if(null===l.left||null!==l.right)return l.left&&t(l.left,e),l.right&&t(l.right,e),!e.includes(!1);if(null===l.left.left&&null===l.left.right)return;e.push(!1)}}(this.root)}rebalance(){if(!this.isBalanced){const t=this.inOrder();this.root=e(t)}}}(i);console.log(f),n(f.root),f.find(6),f.find(1),f.find(5),f.levelOrderIterative(),f.preOrder(),f.postOrder(),f.insert(0),n(f.root),console.log(f.depth(320)),console.log(f.isBalanced()),f.rebalance(),console.log(f.root)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,