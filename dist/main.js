(()=>{"use strict";function s(t){if(1===t.length)return t;{const e=Math.ceil(t.length/2);let h=s(t.slice(0,e)),o=s(t.slice(e)),i=[];for(;h[0]||o[0];)h[0]<o[0]?(i.push(h[0]),h.shift()):o[0]<h[0]?(i.push(o[0]),o.shift()):h[0]==o[0]?(i.push(h[0]),i.push(o[0]),h.shift(),o.shift()):h[0]?o[0]||(i.push(h[0]),h.shift()):(i.push(o[0]),o.shift());return i}}const t=[1,7,4,23,8,9,4,3,5,7,9,67,6345,324];var e;console.log(t),e=t,console.log(e),s(e),console.log(newTree)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,